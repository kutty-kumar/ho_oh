// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ho-oh/snorlax_v1/snorlax.proto

package snorlax_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	core_v1 "github.com/kutty-kumar/ho_oh/core_v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = core_v1.Gender(0)

	_ = core_v1.Status(0)
)

// Validate checks the field values on UserDto with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserDto) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for DateOfBirth

	// no validation rules for Gender

	// no validation rules for Status

	// no validation rules for UserId

	// no validation rules for Email

	// no validation rules for Password

	return nil
}

// UserDtoValidationError is the validation error returned by UserDto.Validate
// if the designated constraints aren't met.
type UserDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDtoValidationError) ErrorName() string { return "UserDtoValidationError" }

// Error satisfies the builtin error interface
func (e UserDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDtoValidationError{}

// Validate checks the field values on UserOperationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserOperationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserOperationResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserOperationResponseValidationError is the validation error returned by
// UserOperationResponse.Validate if the designated constraints aren't met.
type UserOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserOperationResponseValidationError) ErrorName() string {
	return "UserOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserOperationResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	return nil
}

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on GetUserByEmailAndPasswordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetUserByEmailAndPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	// no validation rules for Password

	return nil
}

// GetUserByEmailAndPasswordRequestValidationError is the validation error
// returned by GetUserByEmailAndPasswordRequest.Validate if the designated
// constraints aren't met.
type GetUserByEmailAndPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailAndPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailAndPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailAndPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailAndPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailAndPasswordRequestValidationError) ErrorName() string {
	return "GetUserByEmailAndPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailAndPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailAndPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailAndPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailAndPasswordRequestValidationError{}

// Validate checks the field values on GetUserByExternalIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByExternalIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetUserByExternalIdRequestValidationError is the validation error returned
// by GetUserByExternalIdRequest.Validate if the designated constraints aren't met.
type GetUserByExternalIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByExternalIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByExternalIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByExternalIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByExternalIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByExternalIdRequestValidationError) ErrorName() string {
	return "GetUserByExternalIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByExternalIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByExternalIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByExternalIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByExternalIdRequestValidationError{}
